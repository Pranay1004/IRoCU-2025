import serial
import struct
import time

class MSP:
    def __init__(self, port, baudrate=115200):
        self.ser = serial.Serial(port, baudrate, timeout=1)
        time.sleep(2)  # Wait for connection to establish
        
    def send_cmd(self, cmd, data=None):
        if data is None:
            data = []
        size = len(data)
        checksum = 0
        
        # Calculate checksum
        checksum ^= size
        checksum ^= cmd
        for i in data:
            checksum ^= i
        
        # Construct message
        msg = b'$M<' + struct.pack('<BB', size, cmd)
        msg += bytes(data)
        msg += struct.pack('<B', checksum)
        
        # Send message
        self.ser.write(msg)
        
    def read_response(self, cmd):
        header = self.ser.read(3)  # $M>
        if len(header) != 3:
            print("Error: No proper header received")
            return None
            
        size = ord(self.ser.read(1))
        command = ord(self.ser.read(1))
        
        if command != cmd:
            print(f"Error: Expected command {cmd}, got {command}")
            return None
            
        data = self.ser.read(size)
        checksum = ord(self.ser.read(1))
        
        return data
    
    def motor_test(self, motor_index, value):
        # MSP_SET_MOTOR = 214
        data = []
        for i in range(8):  # Support up to 8 motors
            if i == motor_index - 1:  # Motor index is 1-based in our function
                data.extend([value & 0xFF, (value >> 8) & 0xFF])
            else:
                data.extend([0, 0])  # Zero for other motors
        
        self.send_cmd(214, data)
        return self.read_response(214)
    
    def get_motor_values(self):
        # MSP_MOTOR = 104
        self.send_cmd(104)
        data = self.read_response(104)
        
        if data is None:
            print("Failed to get motor data")
            return None
            
        motors = []
        for i in range(0, len(data), 2):
            if i+1 < len(data):
                motor_value = data[i] + (data[i+1] << 8)
                motors.append(motor_value)
        
        return motors

# Test script
if __name__ == "__main__":
    # Change this to your actual serial port
    serial_port = "/dev/ttyACM0"
    
    try:
        print(f"Connecting to flight controller on {serial_port}...")
        msp = MSP(serial_port)
        
        print("\n--- TESTING ESC CONNECTIONS ---")
        print("WARNING: This will spin the motors! Remove props before continuing!")
        confirm = input("Props removed? Type 'YES' to continue: ")
        
        if confirm != "YES":
            print("Test cancelled for safety reasons.")
            exit()
        
        # First, get current motor values
        print("\nReading current motor values...")
        motors = msp.get_motor_values()
        if motors:
            print(f"Current motor values: {motors}")
        else:
            print("Could not read motor values")
        
        min_throttle = 1050  # Minimum value to make motors spin
        test_throttle = 1100  # Low value for testing
        
        print("\nTesting each motor sequentially...")
        for motor_num in range(1, 5):  # Test motors 1-4
            print(f"\nTesting Motor {motor_num}...")
            
            # Apply test value to the motor
            print(f"Spinning Motor {motor_num} at value {test_throttle}...")
            msp.motor_test(motor_num, test_throttle)
            
            # Check if motor values changed
            time.sleep(1)
            new_motors = msp.get_motor_values()
            if new_motors:
                print(f"Motor values during test: {new_motors}")
                
                # Check if the tested motor is actually spinning
                if new_motors[motor_num - 1] >= min_throttle:
                    print(f"✅ Motor {motor_num} is responding!")
                else:
                    print(f"❌ Motor {motor_num} not responding. Check connections.")
            
            # Stop the motor
            msp.motor_test(motor_num, 0)
            time.sleep(1)
        
        print("\nMotor test completed.")
        
    except serial.SerialException as e:
        print(f"Serial error: {e}")
        print("Tips to fix:")
        print("- Check if the serial port is correct")
        print("- Make sure you have permissions (run: sudo usermod -a -G dialout $USER)")
        
    except Exception as e:
        print(f"Error: {e}")